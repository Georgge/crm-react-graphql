type Client {
    id: ID
    name: String
    lastName: String
    company: String
    emails: [Email]
    type: ClientType
    orders: [Order]
  }

  type Email {
    email: String
  }

  type Order {
    product: String
    price: Int
  }

  enum ClientType {
    BASIC
    PREMIUM
  }

  type Query {
    getClients(limit: Int) : [Client]
    getClient(id: ID) : Client
  }

  input OrderInput {
    product: String
    price: Int
  }

  input EmailInput {
    email: String
  }

  """ Data to client """
  input ClientInput {
    id: ID
    name: String!
    lastName: String
    company: String
    emails: [EmailInput]!
    type: ClientType!
    orders: [OrderInput]
  }

  """ Mutation for create users """
  type Mutation {
    # Resolover name, input with data and value return
    """ For new client """
    createClient(input: ClientInput) : Client
    updateClient(input: ClientInput) : Client
    deleteClient(id: ID!) : String
  }